plugins {
    id("java")
    id("maven-publish")
    id("com.gradleup.shadow") version "9.0.0-beta4"
    id("io.papermc.paperweight.userdev") version "2.0.0-beta.8"
}

group = 'com.github.vermulst'
version = '0.2'

allprojects {
    def computerName = System.getenv("COMPUTERNAME")
    if (computerName != null) {
        if (computerName.contentEquals("DESKTOP-K68G3D6")) {
            layout.buildDirectory.set(file("D:/Minecraft/1.21_used/plugins"))
        } else {
            layout.buildDirectory.set(file("D:/Minecraft/1.21_used/plugins"))
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
    implementation 'org.xerial:sqlite-jdbc:3.46.1.0'
}

def targetJavaVersion = 21
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "https://jitpack.io"
        }
    }
}



tasks.named('shadowJar') {
    archiveBaseName.set("${project.name}-${project.version}")
    archiveClassifier.set('')
    archiveVersion.set('')
    destinationDirectory.set(layout.buildDirectory.get())
    finalizedBy('reobfJar', 'cleanFolders')
    relocate 'org.xerial', 'me.vermulst.vermulstutils.dependencies.xerial'
}

tasks.register('cleanFolders', Delete) {
    delete layout.buildDirectory.dir("libs")
    delete layout.buildDirectory.dir("classes")
    delete layout.buildDirectory.dir("generated")
    delete layout.buildDirectory.dir("resources")
    delete layout.buildDirectory.dir("tmp")
}